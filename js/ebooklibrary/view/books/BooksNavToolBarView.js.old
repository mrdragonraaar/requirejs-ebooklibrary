/**
 * BooksNavToolBarView.js
 *
 * Backbone view representing nav toolbar for ebooklibrary books.
 *
 * (c)2014 mrdragonraaar.com
 */
define([
    'hbs!ebooklibrary/template/books/BooksNavToolBarView',
    'backbone',
    'bootstrap'
],
function(
    BooksNavToolBarViewTemplate,
    Backbone
) {
	var BooksNavToolBarView = Backbone.View.extend({
		tagName: 'ul',
		className: 'books-nav panel-nav nav panel-right',

		/**
		 * Define book panel click events.
		 */
		events: {
			//'click .nav-viewas > a': 'onClickViewAs',
			'click .nav-viewas': 'onClickViewAs',
			'click .toolbar-sortby a': 'onClickSortByMenu'
		},

		/**
		 * Event handler for viewAs click event.
		 * @param e click event.
		 */
		onClickViewAs: function(e) {
			e.preventDefault();

			//console.log(e);
			//console.log(e.currentTarget.parentElement);
			//console.log($(e.currentTarget.parentElement));
			//console.log($(e.currentTarget).data('name'));
			console.log(this.getEventNavItemName(e));
			//console.log($('.nav-viewas[data-name = thumbnails]'));
			console.log(this.getNavItem('nav-viewas', 'thumbnails'));
			this.disableNavItem2('nav-viewas', 'details');

/*
			var viewAsTitle = e.currentTarget.title;

			if (!this.isActiveViewAs(viewAsTitle) && !this.isDisabledViewAs(viewAsTitle)) {
				this.activateViewAs(viewAsTitle);
				this.trigger('viewAs', viewAsTitle);
			}
*/
		},

		getEventNavItem: function(e) {
			return $(e.currentTarget);
		},

		getEventNavItemName: function(e) {
			return this.getEventNavItem(e).data('name');
		},

		getNavItem: function(navItemClass, navItemName) {
			return $('.' + navItemClass + '[data-name = ' + navItemName + ']');
		},

		getAllNavItems: function(navItemClass) {
			return $('.' + navItemClass);
		},

		isActiveNavItem: function(navItemClass, navItemName) {
			return this.getNavItem(navItemClass, navItemName).hasClass('active');
		},

		activateNavItem: function(navItemClass, navItemName) {
			this.getNavItem(navItemClass, navItemName).addClass('active');
		},

		deactivateNavItem: function(navItemClass, navItemName) {
			this.getNavItem(navItemClass, navItemName).removeClass('active');
		},

		activateAllNavItems: function(navItemClass) {
			this.getAllNavItems(navItemClass).addClass('active');
		},

		deactivateAllNavItems: function(navItemClass) {
			this.getAllNavItems(navItemClass).removeClass('active');
		},

		isDisabledNavItem2: function(navItemClass, navItemName) {
			return this.getNavItem(navItemClass, navItemName).hasClass('disabled');
		},

		enableNavItem2: function(navItemClass, navItemName) {
			this.getNavItem(navItemClass, navItemName).removeClass('disabled');
		},

		disableNavItem2: function(navItemClass, navItemName) {
			this.getNavItem(navItemClass, navItemName).addClass('disabled');
		},

		enableAllNavItems: function(navItemClass) {
			this.getAllNavItems(navItemClass).removeClass('disabled');
		},

		disableAllNavItems: function(navItemClass) {
			this.getAllNavItems(navItemClass).addClass('disabled');
		},





		getViewAsNavItem: function(viewAsName) {
			return this.getNavItem('nav-viewas', viewAsName);
		},

		getAllViewAsNavItems: function() {
			return this.getAllNavItems('nav-viewas');
		},

		isActiveViewAsNavItem: function(viewAsName) {
			return this.isActiveNavItem('nav-viewas', viewAsName);
		},

		activateViewAsNavItem: function(viewAsName) {
			this.activateNavItem('nav-viewas', viewAsName);
		},

		deactivateViewAsNavItem: function(viewAsName) {
			this.deactivateNavItem('nav-viewas', viewAsName);
		},

		activateAllViewAsNavItems: function() {
			this.activateAllNavItems('nav-viewas');
		},

		deactivateAllViewAsNavItems: function() {
			this.deactivateAllNavItems('nav-viewas');
		},

		isDisabledViewAsNavItem: function(viewAsName) {
			return this.isDisabledNavItem2('nav-viewas', viewAsName);
		},

		enableViewAsNavItem: function(viewAsName) {
			this.enableNavItem2('nav-viewas', viewAsName);
		},

		disableViewAsNavItem: function(viewAsName) {
			this.disableNavItem2('nav-viewas', viewAsName);
		},

		enableAllViewAsNavItems: function() {
			this.enableAllNavItems('nav-viewas');
		},

		disableAllViewAsNavItems: function() {
			this.disableAllNavItems('nav-viewas');
		},





		/**
		 * Get viewAs nav item.
		 * @param viewAsTitle title of viewAs nav item.
		 * @return viewAs nav item
		 */
		getViewAs: function(viewAsTitle) {
			return this.$('.nav-viewas.viewas-' + viewAsTitle.toLowerCase());
		},

		/**
		 * Get all viewAs nav items.
		 * @return viewAs nav items
		 */
		getAllViewAs: function() {
			return this.$('.nav-viewas');
		},

		/**
		 * Get active viewAs nav item.
		 * @return active viewAs nav item
		 */
		getActiveViewAs: function() {
			return this.$('.nav-viewas.active');
		},

		/**
		 * Get active viewAs nav items title.
		 * @return active viewAs title
		 */
		getActiveViewAsTitle: function() {
			var viewAs = this.getActiveViewAs();
			if (viewAs.length)
				return viewAs.children('a').attr('title');

			return '';
		},

		/**
		 * Is viewAs nav item active.
		 * @param viewAsTitle title of viewAs nav item.
		 * @return true if viewAs nav item is active
		 */
		isActiveViewAs: function(viewAsTitle) {
			return viewAsTitle === this.getActiveViewAsTitle();
		},

		/**
		 * Activate viewAs nav item.
		 * @param viewAsTitle title of viewAs nav item.
		 */
		activateViewAs: function(viewAsTitle) {
			this.deactivateAllViewAs();

			var viewAs = this.getViewAs(viewAsTitle);
			viewAs.addClass('active');
		},

		/**
		 * Activate thumbnails viewAs nav item.
		 */
		activateViewAsThumbnails: function() {
			this.activateViewAs('Thumbnails');
		},

		/**
		 * Activate details viewAs nav item.
		 */
		activateViewAsDetails: function() {
			this.activateViewAs('Details');
		},

		/**
		 * Activate list viewAs nav item.
		 */
		activateViewAsList: function() {
			this.activateViewAs('List');
		},

		/**
		 * Deactivate all viewAs nav items.
		 */
		deactivateAllViewAs: function() {
			var viewAs = this.getAllViewAs();
			viewAs.removeClass('active');
		},

		/**
		 * Is viewAs nav item disabled.
		 * @param viewAsTitle title of viewAs nav item.
		 * @return true if viewAs nav item is disabled
		 */
		isDisabledViewAs: function(viewAsTitle) {
			var viewAs = this.getViewAs(viewAsTitle);
			return this.isDisabledNavItem(viewAs);
		},

		/**
		 * Enable viewAs nav item.
		 */
		enableViewAs: function(viewAsTitle) {
			var viewAs = this.getViewAs(viewAsTitle);
			this.enableNavItem(viewAs);
		},

		/**
		 * Enable thumbnails viewAs nav item.
		 */
		enableViewAsThumbnails: function() {
			this.enableViewAs('Thumbnails');
		},

		/**
		 * Enable details viewAs nav item.
		 */
		enableViewAsDetails: function() {
			this.enableViewAs('Details');
		},

		/**
		 * Enable list viewAs nav item.
		 */
		enableViewAsList: function() {
			this.enableViewAs('List');
		},

		/**
		 * Enable all viewAs nav items.
		 */
		enableAllViewAs: function() {
			var viewAs = this.getAllViewAs();
			this.enableNavItem(viewAs);
		},

		/**
		 * Disable all viewAs nav items.
		 */
		disableAllViewAs: function() {
			var viewAs = this.getAllViewAs();
			this.disableNavItem(viewAs);
		},

		/**
		 * Is nav item disabled.
		 * @param navItem nav item.
		 * @return true if nav item is disabled
		 */
		isDisabledNavItem: function(navItem) {
			return navItem.hasClass('disabled');
		},

		/**
		 * Enable nav item.
		 * @param navItem nav item to enable.
		 */
		enableNavItem: function(navItem) {
			navItem.removeClass('disabled');
		},

		/**
		 * Disable nav item.
		 * @param navItem nav item to disable.
		 */
		disableNavItem: function(navItem) {
			navItem.addClass('disabled');
		},

		/**
		 * Event handler for sortBy menu click event.
		 * @param e click event.
		 */
		onClickSortByMenu: function(e) {
			e.preventDefault();

			var selectedSortByMenuName = e.currentTarget.title;

			if (selectedSortByMenuName === this.getActiveSortByMenuName() &&
			   this.isActiveSortByMenuAscending()) {
				this.setActiveSortByMenu(selectedSortByMenuName, false);
				this.trigger('booksPanelToolBarSortBy', selectedSortByMenuName, false);
			}
			else {
				this.setActiveSortByMenu(selectedSortByMenuName, true);
				this.trigger('booksPanelToolBarSortBy', selectedSortByMenuName, true);
			}
		},

		/**
		 * Get sortBy button.
		 * @return sortBy button
		 */
		getSortByButton: function() {
			return this.$('.toolbar-sortby > button.btn-sortby-dropdown');
		},

		/**
		 * Disable sortBy button.
		 * @param disable if true will disable else will enable.
		 */
		disableSortByButton: function(disable) {
			var sortByButton = this.getSortByButton();
			//this.disableButton(sortByButton, disable);
		},

		/**
		 * Get sortBy menu.
		 * @param sortByMenuName name of sortBy menu.
		 * @return sortBy menu
		 */
		getSortByMenu: function(sortByMenuName) {
			return this.$('.toolbar-sortby > .dropdown-menu > li.dropdown-sortby-' + 
			    sortByMenuName.replace(/ /g, '').toLowerCase());
		},

		/**
		 * Get all sortBy menus.
		 * @return sortBy menus
		 */
		getAllSortByMenus: function() {
			return this.$('.toolbar-sortby > .dropdown-menu > li');
		},

		/**
		 * Get active sortBy menu.
		 * @return active sortBy menu
		 */
		getActiveSortByMenu: function() {
			return this.$('.toolbar-sortby > .dropdown-menu > li.active');
		},

		/**
		 * Get active sortBy menu name.
		 * @return active sortBy menu name
		 */
		getActiveSortByMenuName: function() {
			var sortByMenu = this.getActiveSortByMenu();
			if (sortByMenu.length)
				return sortByMenu.children('a').attr('title');

			return '';
		},

		/**
		 * Test if active sortBy menu is ascending.
		 * @return true if active sortBy menu is ascending
		 */
		isActiveSortByMenuAscending: function() {
			var sortByMenu = this.getActiveSortByMenu();
			if (sortByMenu.length)
				return sortByMenu.hasClass('dropup');

			return false;
		},

		/**
		 * Deactivate all sortBy menus.
		 */
		deactivateAllSortByMenus: function() {
			var sortByMenus = this.getAllSortByMenus();
			sortByMenus.removeClass('active').removeClass('dropup');
			sortByMenus.children('a').children('.caret').addClass('hide');
		},

		/**
		 * Set active sortBy menu.
		 * @param sortByMenuName name of sortBy menu to activate.
		 * @param asc true if sortBy menu is ascending.
		 */
		setActiveSortByMenu: function(sortByMenuName, asc) {
			this.deactivateAllSortByMenus();

			var sortByMenu = this.getSortByMenu(sortByMenuName);
			sortByMenu.addClass('active');
			if (asc)
				sortByMenu.addClass('dropup');
			sortByMenu.children('a').children('.caret').removeClass('hide');
		},

		/**
		 * Render the books panel toolbar.
		 * @return books panel toolbar view
		 */
		render: function() {
			var toolBarTmpl = BooksNavToolBarViewTemplate();
			this.$el.html(toolBarTmpl);

			return this;
		}
	});

	return BooksNavToolBarView;
});
